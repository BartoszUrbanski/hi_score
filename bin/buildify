#!/bin/bash

## See style-guide
## https://google.github.io/styleguide/shell.xml#Function_Names
## http://www.davidpashley.com/articles/writing-robust-shell-scripts.html

## The -u option forces bash to exit when encountering an uninit variable.
## The -e option forces bash to exit when encountering a non-zero exit status.
##   We omit -e as we do our own checking.
set -u;

## == BEGIN Layout variables ===============================================
  _app_name=$( basename $0 );
  _orig_dir=$( pwd );
  echo "start ${_app_name}";
  echo "  > layout vars";

    # app path and name
    _app_link=$( readlink -f -- "${0}" );
    _bin_dir=$( cd "${_app_link%/*}" && echo "${PWD}" );

    # npm modules paths
    _npm_dir=$( dirname "${_bin_dir}" );
    _mod_dir="${_npm_dir}/node_modules";
    _mod_dir_bin="${_mod_dir}/.bin";

    _build_dir="${_npm_dir}/build";
    _dist_dir="${_build_dir}/dist";
    _stage_dir="${_build_dir}/stage";

    _top_log_name="${_app_name}.log";
    _top_log_file="${_npm_dir}/${_top_log_name}";

    # cli varibles defaults
    _do_help=0;
    _do_verbose=0;
    _dont_compress=0;
    _tmplt_dir="${_npm_dir}/tmplt";

    # executables
    _pack_exe="${_bin_dir}/superpack";
    _ugjs_exe="${_mod_dir_bin}/uglifyjs";
    _ugcss_exe="${_mod_dir_bin}/uglifycss";

    # timestamps
    _start_date_=$(date "+%Y-%m-%d %H:%M:%S");
    _ext_date=$(date "+%Y%m%d_%H%M%S");

    # temp dir
    # See http://www.linuxsecurity.com/content/view/115462/81/#mozTocId440182
    _tmp_dir="${TMPDIR-/tmp}/$$.${_app_name}.${_ext_date}";
    ( umask 077 && mkdir "${_tmp_dir}" ) || {
      _do_verbose=1;
      _log_fn "  ! Could not create temporary directory";
      _abort_fn;
    }
  # echo "  < layout vars";
  ## == END Layout variables ===============================================

## BEGIN function to echo to STDERR
_log_stderr_fn () { echo "$*" >&2; }
## END function to echo to STDERR

## BEGIN function to print usage
_show_use_fn () {
  _log_stderr_fn "
NAME : ${_app_name}

SYNOPSIS
  ${_app_name} [ options ] <manifest_1> <manifest_2> ...
";

  [ "${_do_verbose}" -lt 1 ] && _log_stderr_fn "
Employ the -v or --verbose switch to see more detailed help.
";

  [ "${_do_verbose}" -gt 0 ] && _log_stderr_fn "
DESCRIPTION
  ${_app_name} builds a production-ready web site from sources listed
  in manifest files.  The output files are placed in ${_build_dir}
  under the following subdirectories:

    - ${_stage_dir} - Staging area
    - ${_dist_dir}  - Distribution area

  The output files will have the same basename as the source manifest
  file.  Therefore, '${_app_name} ex01.${_app_name}' will output
  the files with the ex01 prefix as illustrated in the examples.

EXAMPLES
  (1) If the file ex01.${_app_name} looks like so:
      ==============
      source:js
      js/foo.js
      ==============

  Then running the following ...

      $ ${_app_name} ./ex01.${_app_name}

  ... results in the following files in ${_stage_dir}:

      js/ex01-min.js  # uglified JS
      js/ex01-raw.js  # concatenated JS
      js/ex01-sp.diag # superpack diagnostics
      js/ex01-sp.js   # superpacked JS


  (2) If the file ex02.${_app_name} looks like so:
      ==============
      source:js
      js/foo.js

      source:css
      css/foo.css
      ==============

  Then running the following ...

      $ ${_app_name} ./ex02.${_app_name}

  results in the following files in ${_stage_dir}:
      js/ex02-min.js  # uglified JS
      js/ex02-raw.js  # concatenated JS
      js/ex02-sp.diag # superpack diagnostics
      js/ex02-sp.js   # superpacked JS

      css/ex02-min.css # uglified CSS
      css/ex02-raw.css # concatenated CSS

ARGUMENTS
  manifest_1, manifest_2, ... (REQUIRED)
    Manifests to process.  Each manifest lists the source files to
    process. It may have multiple sections delineated by a source-type header.
    ${_app_name} expects all paths to be relative to the referencing
    manifest file path.

       sourcetype:js   # for javascript files, and
       # ... js files here ...
       sourcetype:css # for css and source files
       # ... css files here .... (relative to manifest path)

    Blank lines, comment lines, and trailing comments are ignored.

OPTIONS
  * -h | --help | --usage (OPTIONAL)
    Sends short help text to STDERR (usually the terminal) and exits.
    When combined with the -v option, long help is presented.

  * -n | --nocompress (OPTIONAL)
    By default ${_app_name} concatenates and minifies CSS and JS files.
    It also SuperPacks JS files.  This option turns off this behavior.

  * -v | --verbose (OPTIONAL)
    Be noisy when processing

REQUIRED PATCH
  Buildify uses Superpack symbol compression.  Superpack requires a patch
  to UglifyJS.  If you have installed **hi\_score** this patch will have
  been applied when running 'npm run prep-libs' which is the safest means
  to apply the patch.  If you need to do so manually, this should also work:

    \$ cd ${_mod_dir}
    \$ patch -p0 < ../patch/uglifyjs-2.4.10.patch

SEE ALSO
  * UglifyJS
  * UglifyCSS

AUTHOR and COPYRIGHT
  Michael S. Mikowski (c) 2008-2016
";

  exit 1;
}
## END function to print usage

## BEGIN function to log output
_log_fn () {
  local IFS="";
  _msg_str="$*";
  if [ -w "${_top_log_file}" ]; then
    echo "${_msg_str}" >> "${_top_log_file}";
  else
    _log_stderr_fn "${_msg_str}"
  fi

  if [ "${_do_verbose}" -gt 0 ]; then _log_stderr_fn "${_msg_str}"; fi
  return 0;
}
## END function to log output

## BEGIN function to clean up temp files
_clean_tmp_fn () {
  if [ -w "${_tmp_dir}" ]; then
    if echo "${_tmp_dir}" | grep -q "${_app_name}"; then
      _do_verbose=1;
      _log_fn "  > Removed temporary directory ${_tmp_dir}";
      rm -rf "${_tmp_dir}";
    fi
  fi
}
## END function to clean up temp files

## BEGIN function to abort processing
_abort_fn () {
  _do_verbose=1;
  _log_fn '';
  _log_fn "## See ${_app_name} -hv for detailed usage.";
  _log_fn "## ! Processing ABORTED.";

  _clean_tmp_fn;
  # exit with error (bash shell standard)
  exit 1;
}
## END function to abort processing

## BEGIN MAIN
  ## BEGIN get options
  ## (see /usr/share/doc/util-linux/examples/getopt-parse.bash)
  _cli_str=$(getopt -o hnvt: \
    --long help,usage,nocompress,verbose: \
      -n "${_app_name}" -- "$@")

  if [ $? != 0 ] ; then
		_do_verbose=1;
    _log_stderr_fn "  ! Trouble processing command line.";
    _abort_fn;
  fi

  # Note the quotes around $_cli_str: they are essential!
  eval set -- "${_cli_str}"

  # Example arg option with an argument
  # -t|--tmpltdir)     _tmplt_dir="$2";  shift 2 ;;
  while true; do
    case "$1" in
      -h|--help|--usage) _do_help=1;       shift ;;
      -n|--nocompress)   _dont_compress=1; shift ;;
      -v|--verbose)      _do_verbose=1;    shift ;;
      --) shift; break ;;
       *) _do_verbose=1;
          _log_stderr_fn "Trouble processing command line.";
          _abort_fn ;;
    esac
  done

  if [ ${_do_help} -gt 0 ]; then _show_use_fn; fi
  ## END get options (see /usr/share/doc/util-linux/examples/getopt-parse.bash)

  ## BEGIN set global log to start
  if ! echo -n > "${_top_log_file}"; then
    _do_verbose=1;
    _log_stderr_fn "Cannot create global log file '${_top_log_file}'";
    _abort_fn;
  fi
  # put header in log file
  _log_fn "  > Global ${_app_name} log ${_start_date_}";
  ## END set global log to start

  ## BEGIN Find SuperPack
  if [ ! -x "${_pack_exe}" ]; then
    _do_verbose=1;
    _log_fn "  ! Superpack (${_pack_exe}) is not excutable";
    _abort_fn;
  fi
  if ( ! perl -cw "${_pack_exe}" >/dev/null 2>&1 ); then
    _do_verbose=1;
    _log_fn "  ! SuperPack is not valid perl.";
    _log_fn "  ! Please install perl-List-MoreUtils perl-File-Slurp ";
    _log_fn "  ! and perl-Getopt-Mixed.";
    _abort_fn;
  fi
  ## END Find SUPERPACK

  ## BEGIN Find UglifyJS
  if [ ! -x "${_ugjs_exe}" ]; then
    _do_verbose=1;
    _log_fn "  ! UglifyJS (${_ugjs_exe}) is not executable.";
    _log_fn "  ! Try cd ${_npm_dir}; npm install uglifyjs@2.4.10 -D"
    _log_fn "  ! AND THEN ensure the patch is applied (see patch/)"
    _log_fn "  ! as described by ${_app_name} -hv"
    _abort_fn;
  fi
  ## END Find UglifyJS

  ## BEGIN Find UglifyCSS
  if [ -z "${_ugcss_exe}" ]; then
    _do_verbose=1;
    _log_fn "  ! UglifyCSS (${_ugcss_exe}) is not executable.";
    _log_fn "  ! Try cd ${_npm_dir}; npm install uglifycss -D"
    _abort_fn;
  fi
  ## END Find UglifyCSS

  ## BEGIN validiate input files
  _manifest_list=();
  _deploy_copy_list=();
  _deploy_subtree_list=();
  for _manifest_file in $@; do
    if [ ! -f "${_manifest_file}" ]; then
      _do_verbose=1;
      _log_fn "  ! manifest file '${_manifest_file}' is not a regular file.";
      _abort_fn;
    fi

    if [ ! -r "${_manifest_file}" ]; then
      _do_verbose=1;
      _log_fn "  ! manifest file '${_manifest_file}' is not readable.";
      _abort_fn;
    fi

    _manifest_list[${#_manifest_list[*]}]="${_manifest_file}"
    _log_fn "  > Adding ${_manifest_file} to process list"
  done

  if [ "${#_manifest_list[*]}" = 0 ]; then
    _do_verbose=1;
    _log_fn "  ! No manifest provided."
    _abort_fn;
  fi
  ## END validiate input files

  ## BEGIN validate build dir and move global log to it
  if [ -d "${_build_dir}" ]; then
    _scratch_str="${_do_verbose}";
    _do_verbose=1;
    _log_fn "The build directory ${_build_dir} already exists."
    read -p 'Wipe and recreate? (y/N) ' _ans_str;
    _ans_str="${_ans_str^^}";
    if [ "${_ans_str^^:=N}" == 'N' ]; then
      _log_fn "  ! Aborted at user request.";
      _abort_fn;
    fi
    _log_fn "";
    _log_fn "  > Removing ${_build_dir} at user request";
    rm -rf "${_build_dir}";
    _log_fn "  > Removal complete.";
    _do_verbose="${_scratch_str}"
  fi

  _log_fn "  > Processing";
  mkdir ${_build_dir};
  mkdir ${_stage_dir};
  mkdir ${_dist_dir};

  if [ "${_top_log_file}" != "${_build_dir}/${_top_log_name}" ] \
    && ! mv "${_top_log_file}" "${_build_dir}"; then
    _do_verbose=1;
    _log_fn "  ! Could not move global log to build directory";
    _abort_fn;
  else
    _top_log_file="${_build_dir}/${_top_log_name}";
  fi
  ## END validate build dir and move global log there

  ## BEGIN process each manifest in turn
  for (( _file_idx = 0; _file_idx < ${#_manifest_list[*]}; _file_idx++ )); do
    ## BEGIN get path of manifest and determine output names
    _manifest_file="${_manifest_list[$_file_idx]}";
    _manifest_basename=$( basename "${_manifest_file}" );
    _manifest_short_name=$( echo "${_manifest_basename}" |cut -f1 -d'.' );
    _manifest_dir=$( dirname "${_manifest_file}" );
    _manifest_dir=$( cd "${_manifest_dir}" && echo "${PWD}" );

    if [ -z "${_manifest_short_name}" ]; then
      _do_verbose=1;
      _log_fn "  ! Root name of the manifest is empty.";
      _abort_fn;
    fi

    _log_fn "  > ${_app_name}  for ${_manifest_file} on ${_start_date_}";
    ## END get path of manifest and determine output names

    ## BEGIN read manifest and append sources to arrays
    _js_file_list=();
    _css_file_list=();
    _section_type="";

    while read _row_str; do
      # skip blank lines
      echo "${_row_str}" | grep -q '^\s*$' && continue;
      # skip full-line comments
      echo "${_row_str}" | grep -q '^\s*#' && continue;

      # strip end of line comments and indents
      _row_str=$(echo "${_row_str}" | sed -e 's/#.*$//g' \
        | sed -e 's/^\s\+//g' | sed -e 's/\s\+$//g' );

      # process section header 'sourcetype'
      if echo "${_row_str}" | grep -q '^sourcetype\s*:'; then
        _section_type=$( echo "${_row_str}" |sed -e 's/sourcetype\s*:\s*//g' );
        _log_fn "  > Section: ${_row_str}"
        continue;
      fi

      # skip anything if section type not yet specified
      [ "${_section_type}" == "" ] && continue;

      # determine full path to source file and test
      _source_file="${_manifest_dir}/${_row_str}";

      if [ "${_section_type}" = "css" ] || [ "${_section_type}" = "js" ]; then
        if [ ! -r "${_source_file}" ]; then
          _do_verbose=1;
          _log_fn "  ! ${_section_type} file ${_source_file} is not readable.";
          _log_fn "  ! Do you need to update your manifest file?";
          _log_fn "  ! X_${_row_str}_X";
          _abort_fn;
        fi
      fi
      _ext_str=$( echo ${_row_str} |sed -e 's/^.*\.//' );

      case "${_section_type}" in
        js)
          if [ "${_ext_str}" != 'js' ]; then
            _do_verbose=1;
            _log_fn "  > Extension for js file ${_row_str} must be 'js'";
            _abort_fn;
          fi

          _js_file_list[${#_js_file_list[*]}]=${_source_file};
            _log_fn "  > Added file ${_row_str} to javascript processing queue.";
          ;;

        css)
          if [ "${_ext_str}" != 'css' ]; then
            _do_verbose=1;
            _log_fn "  ! Extension for css file ${_row_str} must be 'css'";
            _abort_fn;
          fi

          _css_file_list[${#_css_file_list[*]}]=${_source_file};
          _log_fn "  > Added file ${_row_str} to css processing queue.";
          ;;
        subtree)
          _deploy_subtree_list[${#_css_file_list[*]}]=${_source_file};
          _scratch_str="${_do_verbose}"; _do_verbose=1;
          _log_fn "  ! deploy subtree not yet implemented ${_row_str}";
          _do_verbose="${_scratch_str}";
          ;;
        copy)
          _deploy_copy_list[${#_css_file_list[*]}]=${_source_file};
          _scratch_str="${_do_verbose}"; _do_verbose=1;
          _log_fn "  ! deploy copy not yet implemented ${_row_str}";
          _do_verbose="${_scratch_str}";
          ;;
        *) _do_verbose=1;
          _log_fn "  ! Source type (${_section_type}) not supported.";
          _abort_fn;
          ;;
      esac
    done < "${_manifest_file}"
    ## END read manifest and append sources to arrays

    ## BEGIN determine paths
    _js_concat_file="${_tmp_dir}/$$.${_manifest_short_name}-src.js";
    _css_concat_file="${_tmp_dir}/$$.${_manifest_short_name}-src.css";

    _stage_base_name="${_stage_dir}/${_manifest_short_name}";

    _pack_log_file="${_stage_base_name}-sp.log";
    _pack_diag_file="${_stage_base_name}-sp.diag";
    _ugcss_log_file="${_stage_base_name}-ug_css.log";
    _ugjs_log_file="${_stage_base_name}-ug_js.log";

    _css_out_file="${_stage_base_name}-raw.css";
    _js_out_file="${_stage_base_name}-raw.js";
    ugcss_out_file="${_stage_base_name}-min.css";
    _ugjs_out_file="${_stage_base_name}-min.js";
    _pack_out_file="${_stage_base_name}-sp.js";
    touch "${_pack_log_file}";
    ## END determine paths


    ## BEGIN process javascript files
    for (( i = 0; i < ${#_js_file_list[*]}; i++ ))
    do
      if [ ! -r "${_js_concat_file}" ]; then
        touch "${_js_concat_file}";
        if [ ! -r "${_js_concat_file}" ]; then
          _do_verbose=1;
          _log_fn "Cannot create concatenation file '${_js_concat_file}'";
          _log_fn "for Javascript processing."
          _abort_fn;
        fi
        _log_fn "  > Combining JS Source Files";
      fi
      cat "${_js_file_list[$i]}" >> "${_js_concat_file}";
      _log_fn "  > ${_js_file_list[$i]}";
    done
    ## END process javascript files

    ## BEGIN compress javascript file if specified
    if [ -r "${_js_concat_file}" ] && [ ${_dont_compress} -eq 0 ]; then
      _log_fn "  > Uglify compressing '${_js_concat_file}'";

      ${_ugjs_exe} "${_js_concat_file}" -mc \
        1>  "${_ugjs_out_file}" \
        2>> "${_ugjs_log_file}";
      _ugjs_exit_code=$?;

      if [ ${_ugjs_exit_code} == 0 ]; then
        _log_fn "  > Compression successful.  Output is '${_ugjs_out_file}'";
        rm "${_ugjs_log_file}";
      else
        _do_verbose=1;
        _log_fn "  ! Compression of '${_js_concat_file}' not successfull";
        _log_fn "  ! See '${_ugjs_log_file}' for errors";
        _abort_fn;
      fi
    fi
    ## END compress javascript file if specified

    ## BEGIN superpack javascript file if specified
    if [ -r "${_js_concat_file}" ] && [ ${_dont_compress} -eq 0 ]; then
      ${_pack_exe} \
        -i "${_ugjs_out_file}" \
        -o "${_pack_out_file}" \
        -l "${_pack_log_file}" \
        > ${_pack_diag_file} 2>&1
      _pack_exit_code=$?;

      if [ ${_pack_exit_code} == 0 ]; then
        _log_fn "  > SuperPack successful.  Output is '${_pack_out_file}'";
      else
        _do_verbose=1;
        _log_fn "  ! SuperPack of '${_js_concat_file}' not successfull";
        _log_fn "  ! See '${_pack_log_file}' for errors";
        _abort_fn;
      fi
    fi
    ## END superpack javascript file if specified

    ## BEGIN process css files
    for (( i = 0; i < ${#_css_file_list[*]}; i++ ))
    do
      if [ ! -r "${_css_concat_file}" ]; then
        touch "${_css_concat_file}";
        if [ ! -r "${_css_concat_file}" ]; then
          _do_verbose=1;
          _log_fn "  ! Cannot create concatenation file '${_css_concat_file}'";
          _log_fn "  ! for CSS processing.";
          _abort_fn;
        fi
        _log_fn "  > Combining CSS Source Files";
        _log_fn "  > Writing css concat file '${_css_concat_file}'";
      fi
      cat "${_css_file_list[$i]}" >> "${_css_concat_file}";
      _log_fn "  >> ${_css_file_list[$i]}";
    done
    ## END process css files

    ## BEGIN compress css file if specified
    if [ -r "${_css_concat_file}" ] && [ ${_dont_compress} -eq 0 ]; then
      _log_fn "  > UglifyCSS Compressing '${_css_concat_file}'";

      ${_ugcss_exe} "${_css_concat_file}" \
        1> "${ugcss_out_file}" \
        2>> "${_ugcss_log_file}";
      _ugcss_exit_code=$?;

      if [ ${_ugcss_exit_code} == 0 ]; then
        _log_fn "  > Compression successful.  Output is '${ugcss_out_file}'";
        rm "${_ugcss_log_file}";
      else
        _do_verbose=1;
        _log_fn "  ! Compression of '${_css_concat_file}' not successfull";
        _log_fn "  ! See '${_ugcss_log_file}' for warnings";
        _abort_fn;
      fi
    fi
    ## END compress css file if specified

    ## BEGIN move over remaining files
    for _pair_str in \
      "${_js_concat_file}_XX_${_js_out_file}" \
      "${_css_concat_file}_XX_${_css_out_file}";
    do
      _pair_src_file=$(echo "${_pair_str}" |gawk -F'_XX_' '{print $1}');
      _pair_dst_file=$(echo "${_pair_str}" |gawk -F'_XX_' '{print $2}');

      if [ -r "${_pair_src_file}" ]; then
        if ! mv "${_pair_src_file}" "${_pair_dst_file}"; then
          _do_verbose=1;
          _log_fn "Could not move ${_pair_src_file} to ${_pair_dst_file}";
          _abort_fn;
        fi
      fi
    done
    ## END move over remaining files
  done
  ## END process each manifest in turn

  ## BEGIN move files to dist directory
  mkdir -p "${_dist_dir}" || _abort_fn;
  cd "${_dist_dir}";
  _dist_dir=$(pwd);

  mkdir -p "${_dist_dir}/css";
  mkdir -p "${_dist_dir}/js";
  mkdir -p "${_dist_dir}/img";
  mkdir -p "${_dist_dir}/font";

  _clean_tmp_fn;
  _end_date=$(date "+%Y-%m-%d %H:%M:%S");
  _log_fn "  > ${_app_name} run complete on ${_end_date}";
  echo "end ${_app_name}";
## END MAIN
