#!/bin/bash

# To deploy this script:
# cd ../.git/hooks
# ln -s ../../bin/git-hook_pre-commit pre-commit
#
# See http://www.davidpashley.com/articles/writing-robust-shell-scripts.html
# exit when encountering undeclared variables
set -u;

# exit when encountering a non-zero exit status
# (disabled here as we do are own checking)
# set -e;

## BEGIN Layout variables ==================================================
NODE_EXEC=$(which node);
LINK_PATH=$(readlink -f -- "${0}");
BIN_PATH=$(cd "${LINK_PATH%/*}" && echo "${PWD}");
GIT_DIR=$(cd "$(git rev-parse --show-toplevel)" && pwd );
PKG_DIR=$(find "${GIT_DIR}" -type f -name 'package.json' |head -n1);
MODS_DIR=$(find "${GIT_DIR}" -type d -name 'node_modules' |head -n1);
WAPP_DIR=$(dirname "${MODS_DIR}");
JSLINT_EXEC="${MODS_DIR}/.bin/jslint";
NU_EXEC="${MODS_DIR}/.bin/nodeunit";
NU_FILE="${WAPP_DIR}/test/nu_xhi.util.js";
MAKEDOC_EXEC="${GIT_DIR}/bin/make_doc";
LIST_FILE="/tmp/git-pre-commit.${$}.list.tmp";
TMP_FILE="/tmp/git-pre-commit.${$}.tmp";
CHECK_STR="";
## END Layout variables ====================================================

## BEGIN Lint JavaScript files =============================================
if [ ! -x "${JSLINT_EXEC}" ]; then
  echo "JSLint executable not found."
  echo "Please execute the following command: "
  echo "  cd ${GIT_DIR}; npm install ";
  exit 1;
fi

git status \
  | grep '.*.js' \
  | grep -v '/vendor/' \
  | grep '^\s\+\(modified\|new file\)' \
  | cut -d ":" -f 2- > "${LIST_FILE}"

echo;
echo "Tests of updated or new *.js files ...";
cat "${LIST_FILE}" | while read FILE_NAME; do
  echo "====> ${FILE_NAME}";
  CHECK_STR=$(${JSLINT_EXEC} "${FILE_NAME}");
  CHECK_CODE=$?;
  if [ "${CHECK_CODE}" -gt 0 ]; then
    echo "  JSLint check FAILED";
    echo "  ${CHECK_STR}";
  fi;
  CHECK_STR=$(grep -nP '\t' "${FILE_NAME}");
  if [ ! -z "${CHECK_STR}" ]; then
    echo "  Tab check FAILED";
    echo "  ${CHECK_STR}";
    echo;
  fi
  CHECK_STR=$(grep -nP '\s+$' ${FILE_NAME});
  if [ ! -z "${CHECK_STR}" ]; then
    echo "  Trailing space check FAILED";
    echo "  ${CHECK_STR}";
    echo;
  fi
  CHECK_STR=$(grep '^\s*.use strict.;$' ${FILE_NAME});
  if [ -z "${CHECK_STR}" ]; then
    echo "  Strict use check FAILED";
    echo "  Please add 'use strict'; at the top of your module function.";
    echo;
  fi
  echo "<====";
  echo;
done | tee "${TMP_FILE}";

echo "Tests complete";
if grep -qs 'FAIL' "${TMP_FILE}"; then
  echo "Checks did not pass.";
  echo "  Please fix the problem files and commit again.";
  rm "${TMP_FILE}";
  exit 1;
fi

rm "${TMP_FILE}";
rm "${LIST_FILE}";

echo;
## END Lint JavaScript files ===============================================

## BEGIN Process changed documents ========================================
## TODO
##  if [ ! -x "${MAKEDOC_EXEC}" ]; then
##    echo "bin/make_doc not found.  This file should exist.";
##    echo "Please check your installation.";
##    exit 1;
##  fi
##  echo "Updating HTML documents from MarkDown";
##  "${MAKEDOC_EXEC}";
##  RET_VAL=$?;
##  if [ "${RET_VAL}" -eq "0" ]; then
##    echo "Document file failure".
##    echo "Please check your installation.";
##    exit "${RET_VAL}";
##  fi
##
## END Process changed documents ==========================================

## BEGIN Run regression tests ==============================================
if [ ! -x "${NODE_EXEC}" ]; then
  echo "Node not found.  Please install nodejs and ensure it is "
  echo " found in your PATH environment variable."
  exit 1;
fi

if [ ! -x "${NU_EXEC}" ]; then
  echo "Nodeunit not found.  Please run "
  echo "cd ${GIT_DIR}; npm install"
  echo
fi

if [ ! -r "${NU_FILE}" ]; then
  echo "Nodeunit file ${NU_FILE} not found."
  echo "Please ensure it exists."
  echo
  exit 1;
fi

echo "Running regression tests";
"${NU_EXEC}" "${NU_FILE}"
exit $?;
## END Run regression tests ================================================
